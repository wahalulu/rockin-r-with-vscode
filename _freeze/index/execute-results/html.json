{
  "hash": "fea3c272848bbe9492366186a110f9b7",
  "result": {
    "markdown": "---\ntitle: Rockin' {{< fa brands r-project >}}<br>with<br>Visual Studio Code (VSCode)\nauthor: \"Marck Vaisman\"\n---\n\n\n## Hi!\n\n:::: {.columns}\n\n::: {.column width=40%}\n![](https://media.giphy.com/media/pxwlYSM8PfY5y/giphy.gif)\n:::\n\n::: {.column width=60%}\n-   Sr. Cloud Solutions Architect | Technical Specialist | Data Scientist @ Microsoft\n    -   6 mos as PM Azure Machine Learning\n-   Professor, Georgetown Masters of Data Science and Analytics \n-   Co-Founder of DataCommunityDC\n:::\n\n::::\n\n**Disclaimer:** the opinions expressed in this talk are personal and not reflective of any organization I am affiliated with.\n\n## Thank you, AI\n\n::: notes\n- not an AI talk, but I work with this every day\n- It's a great tool for certain tasks\n- Given what's been going on in the world, it's been hard to concentrate\n- Prompt: write a detailed outline with summary bullets for 20 slides for a presentation on using R with VSCode (also helps with ADD)\n- Used Bing Chat Enterprise \n:::\n\n![](img/bing-chat-enterprise.png){fig-align=\"center\" height=500}\n\n::: aside\nBing Chat Enterprise Prompt: `write a detailed outline with summary bullets for 20 slides for a presentation on using R with VSCode`\n:::\n\n\n## Agenda, sorta...\n\n::: {layout-ncol=3}\n\n![](img/talk1.png)\n\n![](img/talk2.png)\n\n![](img/talk3.png)\n:::\n\n## No fighting!\n\n![](img/boxing.png){fig-align=\"center\" height=500}\n\n::: aside\nImage generated by DALL-E on Azure OpenAI. Prompt: `rocky balboa vs ivan drago` (except logos)\n:::\n\n## Options are good!\n\n![](img/together.png){fig-align=\"center\" height=500}\n\n::: aside\nImage generated by DALL-E on Azure OpenAI. Prompt: `a data scientist working on two separate computers` (except logos)\n:::\n\n## About VSCode\n\n:::: {.columns}\n\n::: {.column width=40%}\n![](img/vscode-sample.png)\n:::\n\n::: {.column width=60% .r-fit-text}\n- Source-code editor built on [Electron framework](https://www.electronjs.org/docs/latest#:~:text=Electron%20is%20a%20framework%20for%20building%20desktop%20applications,and%20Linux%20%E2%80%94%20no%20native%20development%20experience%20required.)\n- Many language specific development utilities\n- Cloud integration\n- Most of VSCode's source code is available on GitHub under the permissive MIT License.\n- The binary releases by Microsoft are freeware and include proprietary code.\n- A community distribution, called VSCodium, is maintained, which provides MIT licensed binaries.\n:::\n\n::::\n\n## Why VSCode\n\n::: {.incremental}\n- Multiple languages {{< fa brands r-project >}}, {{< fa brands python >}}, {{< fa brands js >}}, {{< fa brands html5 >}}, etc.\n- Remote computing and don't want to install a server based IDE\n- Git interation\n- Multiplexing in the terminal\n- You need additional functionality via extensions\n:::\n\n## What do you need?\n\n:::{layout-ncol=2}\n\n### Required\n- VSCode: [R Extension for VSCode](https://marketplace.visualstudio.com/items?itemName=REditorSupport.r)\n- R: [`languageserver`](https://github.com/REditorSupport/languageserver) package (an imeplementation of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/))\n  - code completion\n  - linting\n  - workspace viewer\n  - debugging\n  \n\n### Optional, but highly recommended\n\n- Python: [`radian`](https://github.com/randy3k/radian), a \"21st century R console\" (radian is powered by (Ï€)thon)\n- R: [`httpgd`](https://github.com/nx10/httpgd) package \n- R linters \n- VSCode: [R Debugger Extension](https://marketplace.visualstudio.com/items?itemName=RDebugger.r-debugger)\n\n:::\n\n::: {.callout-note}\nIf you use multiple `R` or `Python` environments, these packages need to be installed in the _base_ environment.\n:::\n\n\n\n\n## \n:::: {.columns}\n\n::: {.column width=\"30%\"}\n![](https://media.giphy.com/media/RlO3bvMJyz3L4vGKsx/giphy.gif)\n\nNeed to:\n\n* Create key-binding for assignment `<-`  {{< kbd Alt-dash >}}\n* Create key-binding for pipe `|>` {{< kbd Ctrl-Shift-M >}} \n\n:::\n\n::: {.column width=\"70%\"}\nYou {{< fa solid heart >}} your RStudio keyboard shorcuts!\n\n| Task    | RStudio {{< fa brands apple >}} , {{< fa brands windows >}} | VSCode |\n|---------|----------------------------------|-----------------| \n| Run code line/block | {{< kbd Cmd-Return >}} , {{< kbd Ctrl+Enter >}} | Same |\n| Insert assignment operator `<-` | {{< kbd Option-- >}} , {{< kbd Alt-- >}} | N/A |\n| Insert pipe operator `|>` | {{< kbd Cmd-Shift-M >}} , {{< kbd Ctrl-Shift-M >}} | N/A |\n| Toggle comment | {{< kbd Cmd-Shift-C >}} , {{< kbd Ctrl-Shift-C >}} | {{< kbd Command-/ >}} , {{< kbd Ctrl-/ >}} |\n\n\n:::\n\n::::\n\n## {background-image=\"https://media.giphy.com/media/3o6fIT3mShNcekq676/giphy.gif\"}\n\n\n## My VSCode User Settings\n\nPress {{< kbd F1 >}} (all OS's), {{< kbd Command-Shift-P >}} ({{< fa brands apple >}}), or {{< kbd Ctrl-Shift-P >}} ({{< fa brands windows >}}) to open the Command Palette, then select `Preferences: Open User Setting (JSON)`.\n\n\n```json\n{\n    // VSCode Editor Specific Settings //\n    \"editor.fontSize\": 14,\n    \"editor.fontFamily\": \"Fira Code\",\n    \"terminal.integrated.fontSize\": 14,\n    \"terminal.integrated.fontFamily\": \"Fira Code\",\n    \"editor.fontLigatures\": true,\n    // R Specific Settings //\n    \"r.plot.useHttpgd\": true,\n    \"[r]\": {\n        \"editor.formatOnType\": true,\n        \"editor.formatOnSave\": true,\n    },\n    \"r.sessionWatcher\": true,\n    \"r.rterm.option\": [\n        \"--no-save\",\n        \"--no-restore\",\n        \"--no-restore-history\",\n        \"--no-site-file\",\n        \"--quiet\"\n    ],\n    // If using radian: (not recommended for remote use)//\n    \"r.bracketedPaste\": true, \n    \"r.rterm.mac\": \"/Users/marck/miniforge3/bin/radian\",\n }\n```\n\n::: notes\n- `r.alwaysUseActiveTerminal` ensures that pressing Ctrl (Command) + Enter will always send to the active terminal rather than trying to create an R terminal if there is none.\n- `r.bracketedPaste` ensures the command chunk can be correctly sent to radian.\n- `r.sessionWatcher` enables R session watcher for better interactive functionality.\n:::\n\n\n\n## My VSCode Keyboard Bindings\n\nPress {{< kbd F1 >}} (all OS's), {{< kbd Shift-Command-P >}} ({{< fa brands apple >}}), or {{< kbd Ctrl-Shift-P >}} ({{< fa brands windows >}}) to open the Command Palette, then select `Preferences: Open Keyboard Shortcus (JSON)`.\n\n````json\n[\n  // Editor bindings //  \n  {\n    \"key\": \"alt+-\",\n    \"command\": \"type\",\n    \"when\": \"editorLangId =~ /r|rmd|qmd/ && editorTextFocus\",\n    \"args\": {\n      \"text\": \" <- \"\n    }\n  },\n  {\n    \"key\": \"ctrl+shift+m\",\n    \"command\": \"type\",\n    \"when\": \"editorLangId =~ /r|rmd|qmd/ && editorTextFocus\",\n    \"args\": {\n      \"text\": \" |> \"\n    }\n  },\n  // Terminal bindings //\n  {\n    \"key\": \"ctrl+shift+m\",\n    \"command\": \"workbench.action.terminal.sendSequence\",\n    \"args\": { \"text\": \" |> \" },\n    \"when\": \"terminalFocus\"\n  },\n  {\n    \"key\": \"alt+-\",\n    \"command\": \"workbench.action.terminal.sendSequence\",\n    \"args\": { \"text\": \" <- \" },\n    \"when\": \"terminalFocus\"\n  },\n]\n````\n\n## R interactive experience on remote machines\n\nWhile you can create a connection to a remote server within VSCode using SSH, you need to do the following:\n\n- Have `R` installed on remote machine\n- Have `languageserver` and `httpgd` installed on remote machine (in base environment)\n- Install the R Extension on the remote VSCode window\n\n::: aside\nDemo\n:::\n\n## Resources\n\n::: {layout-ncol=2}\n\n### Setting up VSCode for R\n- [R in VSCode docs](https://code.visualstudio.com/docs/languages/r)\n- [The VSCode R Extension wiki](https://github.com/REditorSupport/vscode-R/wiki)\n- [Ken Run's website](https://renkun.me/) has several posts on using R with VSCode. He's one of the developers of the developers of the VSCode extension and the `languageserver` package\n- [S/O question on adding keybindings](https://stackoverflow.com/questions/71608612/how-to-add-keybindings-in-visual-studio-code-for-the-r-terminal)\n- [S/O question on getting VSCode to auto-format R code](https://stackoverflow.com/questions/57395681/getting-visual-studio-code-to-auto-format-r-code)\n\n### Using VSCode and R with Azure Machine Learning\n- [Youtube video from SLC-RUG: Using R with Visual Studio Code and Azure Machine Learning (May, 2023)](https://www.youtube.com/watch?v=lIjSzG0puMs)\n- [The AI Show Live - Using R with Azure Machine Learning (May, 2023)](https://www.youtube.com/watch?v=ZjsTg2v5aSQ)\n- [GitHub repo with the R/AzureML code](https://github.com/wahalulu/using-r-with-azure-machine-learning)\n- [Microsoft Learn: Using R with AzureML docs](https://learn.microsoft.com/en-us/azure/machine-learning/how-to-r-overview-r-capabilities)\n\n:::\n\n## See ya' next year!\n\n![](img/dancing.gif){fig-align=\"center\" height=500}\n\n\n# Thank You!\n\n:::: {.columns}\n\n::: {.column width=50%}\n`marck.vaisman@microsoft.com`<br>\n[{{< fa brands github >}} wahalulu](http://www.github.com/wahalulu)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/echo-false-1.png){width=2400}\n:::\n:::\n\n:::\n\n::: {.column width=50%}\n![](https://media.giphy.com/media/K3kR9EZj8Uwk8/giphy.gif)\n:::\n\n::::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}